#!/bin/bash

# Create main.h
cat <<EOF > main.h
#ifndef MAIN_H
#define MAIN_H

char *create_array(unsigned int size, char c);
int _putchar(char c);
char *_strdup(char *str);
char *str_concat(char *s1, char *s2);
int **alloc_grid(int width, int height);
void free_grid(int **grid, int height);
char *argstostr(int ac, char **av);

#endif /* MAIN_H */
EOF

# Create _putchar.c
cat <<EOF > _putchar.c
#include "main.h"
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
    return (write(1, &c, 1));
}
EOF

# Create 0-create_array.c
cat <<EOF > 0-create_array.c
#include "main.h"
#include <stdlib.h>

/**
 * create_array - create array of size size and assign char c
 * @size: size of array
 * @c: char to assign
 *
 * Return: pointer to array, NULL if fail
 */
char *create_array(unsigned int size, char c)
{
    char *str;
    unsigned int i;

    str = malloc(sizeof(char) * size);
    if (size == 0 || str == NULL)
        return (NULL);

    for (i = 0; i < size; i++)
        str[i] = c;
    return (str);
}
EOF

# Create 1-strdup.c
cat <<EOF > 1-strdup.c
#include "main.h"
#include <stdlib.h>

/**
 * _strdup - duplicate to new memory space location
 * @str: char
 *
 * Return: pointer to duplicated string
 */
char *_strdup(char *str)
{
    char *dup;
    unsigned int i, len = 0;

    if (str == NULL)
        return (NULL);

    while (str[len])
        len++;

    dup = malloc(sizeof(char) * (len + 1));
    if (dup == NULL)
        return (NULL);

    for (i = 0; i <= len; i++)
        dup[i] = str[i];

    return (dup);
}
EOF

# Create 2-str_concat.c
cat <<EOF > 2-str_concat.c
#include "main.h"
#include <stdlib.h>

/**
 * str_concat - concatenates two strings
 * @s1: first string
 * @s2: second string
 *
 * Return: pointer to newly allocated space containing concatenated string
 */
char *str_concat(char *s1, char *s2)
{
    char *concat_str;
    unsigned int len1 = 0, len2 = 0, i, j;

    if (s1 == NULL)
        s1 = "";
    if (s2 == NULL)
        s2 = "";

    while (s1[len1])
        len1++;
    while (s2[len2])
        len2++;

    concat_str = malloc(sizeof(char) * (len1 + len2 + 1));
    if (concat_str == NULL)
        return (NULL);

    for (i = 0; i < len1; i++)
        concat_str[i] = s1[i];

    for (j = 0; j < len2; j++, i++)
        concat_str[i] = s2[j];

    concat_str[i] = '\0';

    return (concat_str);
}
EOF

# Create 3-alloc_grid.c
cat <<EOF > 3-alloc_grid.c
#include "main.h"
#include <stdlib.h>

/**
 * alloc_grid - allocates a 2D array of integers
 * @width: width of the grid
 * @height: height of the grid
 *
 * Return: pointer to the newly created 2D array, NULL if failure
 */
int **alloc_grid(int width, int height)
{
    int **grid;
    int i, j;

    if (width <= 0 || height <= 0)
        return (NULL);

    grid = malloc(sizeof(int *) * height);
    if (grid == NULL)
        return (NULL);

    for (i = 0; i < height; i++)
    {
        grid[i] = malloc(sizeof(int) * width);
        if (grid[i] == NULL)
        {
            for (j = 0; j < i; j++)
                free(grid[j]);
            free(grid);
            return (NULL);
        }
    }

    for (i = 0; i < height; i++)
    {
        for (j = 0; j < width; j++)
            grid[i][j] = 0;
    }

    return (grid);
}
EOF

# Create 4-free_grid.c
cat <<EOF > 4-free_grid.c
#include "main.h"
#include <stdlib.h>

/**
 * free_grid - frees a 2D grid previously created by alloc_grid function
 * @grid: 2D array to free
 * @height: height of the grid
 */
void free_grid(int **grid, int height)
{
    int i;

    if (grid == NULL || height <= 0)
        return;

    for (i = 0; i < height; i++)
        free(grid[i]);

    free(grid);
}
EOF

# Create 100-argstostr.c
cat <<EOF > 100-argstostr.c
#include "main.h"
#include <stdlib.h>

/**
 * argstostr - concatenates all the arguments of your program
 * @ac: argument count
 * @av: argument vector
 *
 * Return: pointer to a new string, or NULL if ac == 0 or av == NULL
 */
char *argstostr(int ac, char **av)
{
    char *str;
    int i, j, k, len;

    if (ac == 0 || av == NULL)
        return (NULL);

    len = 0;
    for (i = 0; i < ac; i++)
    {
        for (j = 0; av[i][j]; j++)
            len++;
        len++;
    }

    str = malloc(sizeof(char) * (len + 1));
    if (str == NULL)
        return (NULL);

    k = 0;
    for (i = 0; i < ac; i++)
    {
        for (j = 0; av[i][j]; j++, k++)
            str[k] = av[i][j];
        str[k] = '\n';
        k++;
    }

    str[k] = '\0';
    return (str);
}
EOF

# Save this script as create.sh and make it executable using:
# chmod +x create.sh

