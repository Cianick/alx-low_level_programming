#!/bin/bash

# Create main.h
cat <<EOF > main.h
#ifndef MAIN_H
#define MAIN_H

int _putchar(char c);
char *_strcat(char *dest, char *src);
char *_strncat(char *dest, char *src, int n);
char *_strncpy(char *dest, char *src, int n);
int _strcmp(char *s1, char *s2);
void reverse_array(int *a, int n);
char *string_toupper(char *a);
char *cap_string(char *a);
char *leet(char *a);
char *rot13(char *a);
void print_number(int n);
char *infinite_add(char *n1, char *n2, char *r, int size_r);
void print_buffer(char *b, int size);

#endif
EOF

# Create _putchar.c
cat <<EOF > _putchar.c
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
    return (write(1, &c, 1));
}
EOF

# Create 0-strcat.c
cat <<EOF > 0-strcat.c
#include "main.h"

/**
 * _strcat - concatenates two strings
 * @dest: destination string
 * @src: source string
 *
 * Return: pointer to the resulting string
 */
char *_strcat(char *dest, char *src)
{
    int dest_len = 0;
    int i;

    while (dest[dest_len] != '\0')
        dest_len++;

    for (i = 0; src[i] != '\0'; i++)
        dest[dest_len++] = src[i];

    dest[dest_len] = '\0';
    return (dest);
}
EOF

# Create 1-strncat.c
cat <<EOF > 1-strncat.c
#include "main.h"

/**
 * _strncat - concatenates two strings up to n bytes
 * @dest: destination string
 * @src: source string
 * @n: maximum number of bytes to concatenate from src
 *
 * Return: pointer to the resulting string
 */
char *_strncat(char *dest, char *src, int n)
{
    int dest_len = 0;
    int i;

    while (dest[dest_len] != '\0')
        dest_len++;

    for (i = 0; i < n && src[i] != '\0'; i++)
        dest[dest_len++] = src[i];

    dest[dest_len] = '\0';
    return (dest);
}
EOF

# Create 2-strncpy.c
cat <<EOF > 2-strncpy.c
#include "main.h"

/**
 * _strncpy - copies a string up to n bytes
 * @dest: destination string
 * @src: source string
 * @n: number of bytes to copy from src
 *
 * Return: pointer to the resulting string
 */
char *_strncpy(char *dest, char *src, int n)
{
    int i;

    for (i = 0; i < n && src[i] != '\0'; i++)
        dest[i] = src[i];

    for (; i < n; i++)
        dest[i] = '\0';

    return (dest);
}
EOF

# Create 3-strcmp.c
cat <<EOF > 3-strcmp.c
#include "main.h"

/**
 * _strcmp - compares two strings
 * @s1: first string
 * @s2: second string
 *
 * Return: 0 if strings are equal, positive value if s1 is greater, negative
 * value if s2 is greater
 */
int _strcmp(char *s1, char *s2)
{
    int i;

    for (i = 0; s1[i] != '\0' && s2[i] != '\0'; i++)
    {
        if (s1[i] != s2[i])
            return (s1[i] - s2[i]);
    }

    if (s1[i] != '\0')
        return (s1[i]);

    if (s2[i] != '\0')
        return (-s2[i]);

    return (0);
}
EOF

# Create 4-rev_array.c
cat <<EOF > 4-rev_array.c
#include "main.h"

/**
 * reverse_array - reverses the content of an array of integers
 * @a: array of integers
 * @n: number of elements in the array
 */
void reverse_array(int *a, int n)
{
    int tmp, i;

    for (i = 0; i < n / 2; i++)
    {
        tmp = a[i];
        a[i] = a[n - i - 1];
        a[n - i - 1] = tmp;
    }
}
EOF

# Create 5-string_toupper.c
cat <<EOF > 5-string_toupper.c
#include "main.h"

/**
 * string_toupper - changes all lowercase letters of a string to uppercase
 * @str: input string
 *
 * Return: pointer to the resulting string
 */
char *string_toupper(char *str)
{
    int i;

    for (i = 0; str[i] != '\0'; i++)
    {
        if (str[i] >= 'a' && str[i] <= 'z')
            str[i] -= 32;
    }

    return (str);
}
EOF

# Create 6-cap_string.c
cat <<EOF > 6-cap_string.c
#include "main.h"

/**
 * cap_string - capitalizes all words of a string
 * @str: input string
 *
 * Return: pointer to the resulting string
 */
char *cap_string(char *str)
{
    int i;
    int is_word;

    is_word = 0;
    for (i = 0; str[i] != '\0'; i++)
    {
        if (str[i] >= 'a' && str[i] <= 'z')
        {
            if (is_word == 0)
                str[i] -= 32;

            is_word = 1;
        }
        else if ((str[i] >= 'A' && str[i] <= 'Z') ||
                 (str[i] >= '0' && str[i] <= '9'))
        {
            is_word = 1;
        }
        else
        {
            is_word = 0;
        }
    }

    return (str);
}
EOF

# Create 7-leet.c
cat <<EOF > 7-leet.c
#include "main.h"

/**
 * leet - encodes a string into 1337
 * @str: input string
 *
 * Return: pointer to the resulting string
 */
char *leet(char *str)
{
    int i, j;
    char leet_letters[] = "AEOTL";
    char leet_numbers[] = "43071";

    for (i = 0; str[i] != '\0'; i++)
    {
        for (j = 0; leet_letters[j] != '\0'; j++)
        {
            if (str[i] == leet_letters[j] || str[i] == leet_letters[j] + 32)
                str[i] = leet_numbers[j];
        }
    }

    return (str);
}
EOF

# Create 8-rot13.c
cat <<EOF > 8-rot13.c
#include "main.h"

/**
 * rot13 - encodes a string using rot13
 * @str: input string
 *
 * Return: pointer to the resulting string
 */
char *rot13(char *str)
{
    int i, j;
    char alphabet[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    char rot13[] = "nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM";

    for (i = 0; str[i] != '\0'; i++)
    {
        for (j = 0; alphabet[j] != '\0'; j++)
        {
            if (str[i] == alphabet[j])
            {
                str[i] = rot13[j];
                break;
            }
        }
    }

    return (str);
}
EOF

# Create 100-print_number.c
cat <<EOF > 100-print_number.c
#include "main.h"

/**
 * print_number - prints an integer
 * @n: input integer
 */
void print_number(int n)
{
    int digits, divisor, i, last_digit;

    if (n == 0)
    {
        _putchar('0');
        return;
    }

    if (n < 0)
    {
        _putchar('-');
        n = -n;
    }

    digits = 0;
    divisor = 1;
    while (n / divisor != 0)
    {
        digits++;
        divisor *= 10;
    }

    divisor /= 10;

    for (i = 0; i < digits; i++)
    {
        last_digit = n / divisor;
        _putchar(last_digit + '0');
        n = n - (last_digit * divisor);
        divisor /= 10;
    }
}
EOF

# Create 101-infinite_add.c
cat <<EOF > 101-infinite_add.c
#include "main.h"

/**
 * reverse_string - reverses a string
 * @s: input string
 */
void reverse_string(char *s)
{
    int len = 0, i;
    char temp;

    while (s[len] != '\0')
        len++;

    for (i = 0; i < len / 2; i++)
    {
        temp = s[i];
        s[i] = s[len - i - 1];
        s[len - i - 1] = temp;
    }
}

/**
 * infinite_add - adds two numbers
 * @n1: first number as a string
 * @n2: second number as a string
 * @r: buffer to store the result
 * @size_r: buffer size
 * Return: pointer to the result
 */
char *infinite_add(char *n1, char *n2, char *r, int size_r)
{
    int i, j, k, carry, sum;

    i = 0;
    j = 0;
    carry = 0;

    while (n1[i] != '\0')
        i++;

    while (n2[j] != '\0')
        j++;

    if (i >= size_r || j >= size_r)
        return (0);

    r[size_r - 1] = '\0';
    i--;
    j--;
    k = size_r - 2;

    while (i >= 0 || j >= 0)
    {
        sum = carry;

        if (i >= 0)
            sum += n1[i] - '0';

        if (j >= 0)
            sum += n2[j] - '0';

        carry = sum / 10;
        r[k] = (sum % 10) + '0';

        i--;
        j--;
        k--;
    }

    if (carry)
    {
        if (size_r == 1)
            return (0);

        r[k] = carry + '0';
    }
    else
        k++;

    reverse_string(r + k);
    return (r + k);
}
EOF

# Create 102-magic.c
cat <<EOF > 102-magic.c
#include <stdio.h>

void print_number(int n);

/**
 * main - Entry point
 *
 * Return: Always 0
 */
int main(void)
{
    int n;

    n = 98;
    printf("n = %d\n", n);
    print_number(n);
    printf("\n");
    n = 402;
    printf("n = %d\n", n);
    print_number(n);
    printf("\n");
    n = 1024;
    printf("n = %d\n", n);
    print_number(n);
    printf("\n");
    n = 0;
    printf("n = %d\n", n);
    print_number(n);
    printf("\n");
    n = -98;
    printf("n = %d\n", n);
    print_number(n);
    printf("\n");
    return (0);
}
EOF

# Create 103-print_buffer.c
cat <<EOF > 103-print_buffer.c
#include "main.h"
#include <stdio.h>

/**
 * print_buffer - Prints the content of an array buffer
 * @b: The array buffer
 * @size: The size of the buffer
 */
void print_buffer(char *b, int size)
{
    int i, j;

    if (size <= 0)
        printf("\n");

    for (i = 0; i < size; i += 10)
    {
        printf("%08x: ", i);
        for (j = 0; j < 10; j++)
        {
            if (i + j >= size)
                printf("  ");
            else
                printf("%02x", b[i + j]);

            if (j % 2 != 0)
                printf(" ");
        }

        for (j = 0; j < 10; j++)
        {
            if (i + j >= size)
                break;

            if (b[i + j] >= ' ' && b[i + j] <= '~')
                printf("%c", b[i + j]);
            else
                printf(".");
        }

        printf("\n");
    }
}
EOF

# Add execution permissions to the script files
chmod +x _putchar.c 0-strcat.c 1-strncat.c 2-strncpy.c 3-strcmp.c 4-rev_array.c 5-string_toupper.c 6-cap_string.c 7-leet.c 8-rot13.c 100-print_number.c 101-infinite_add.c 102-magic.c 103-print_buffer.c

echo "All files have been created successfully!"

