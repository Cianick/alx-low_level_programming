#!/bin/bash

# Create the C files
cat << 'EOF' > 0-isupper.c
#include "holberton.h"

/**
 * _isupper - checks for uppercase character
 * @c: character to check
 * Return: 1 if c is uppercase, 0 otherwise
 */
int _isupper(int c)
{
	return (c >= 'A' && c <= 'Z');
}
EOF

cat << 'EOF' > 0-print_listint.c
#include "lists.h"

/**
 * print_listint - prints all the elements of a listint_t list
 * @h: pointer to the list
 * Return: the number of nodes
 */
size_t print_listint(const listint_t *h)
{
	size_t count = 0;

	while (h != NULL)
	{
		printf("%d\n", h->n);
		h = h->next;
		count++;
	}

	return (count);
}
EOF

cat << 'EOF' > 100-reverse_listint.c
#include "lists.h"

/**
 * reverse_listint - reverses a listint_t linked list
 * @head: pointer to the pointer of the first node
 * Return: pointer to the first node of the reversed list
 */
listint_t *reverse_listint(listint_t **head)
{
	listint_t *prev = NULL;
	listint_t *next = NULL;

	while (*head != NULL)
	{
		next = (*head)->next;
		(*head)->next = prev;
		prev = *head;
		*head = next;
	}

	*head = prev;
	return (*head);
}
EOF

cat << 'EOF' > 101-print_listint_safe.c
#include "lists.h"

/**
 * print_listint_safe - prints a listint_t linked list safely
 * @head: pointer to the first node
 * Return: number of nodes in the list
 */
size_t print_listint_safe(const listint_t *head)
{
	size_t count = 0;
	const listint_t *current = head;
	const listint_t *check = head;

	while (current != NULL)
	{
		printf("[%p] %d\n", (void *)current, current->n);
		count++;
		current = current->next;

		/* Check for a loop */
		if (count > 10)
		{
			if (check >= current)
			{
				printf("-> [%p] %d\n", (void *)current, current->n);
				break;
			}
			check = check->next;
			count--;
		}
	}

	return (count);
}
EOF

cat << 'EOF' > 102-free_listint_safe.c
#include "lists.h"

/**
 * free_listint_safe - frees a listint_t linked list safely
 * @h: pointer to the first node
 * Return: number of nodes in the list
 */
size_t free_listint_safe(listint_t **h)
{
	size_t count = 0;
	listint_t *current = *h;
	listint_t *next;

	while (current != NULL)
	{
		count++;
		next = current->next;
		free(current);
		if (current >= next)
		{
			*h = NULL;
			break;
		}
		current = next;
	}

	*h = NULL;
	return (count);
}
EOF

cat << 'EOF' > 103-find_loop.c
#include "lists.h"

/**
 * find_listint_loop - finds the loop in a listint_t linked list
 * @head: pointer to the first node
 * Return: the address of the node where the loop starts, or NULL if no loop
 */
listint_t *find_listint_loop(listint_t *head)
{
	listint_t *slow = head;
	listint_t *fast = head;

	while (slow != NULL && fast != NULL && fast->next != NULL)
	{
		slow = slow->next;
		fast = fast->next->next;

		if (slow == fast)
		{
			slow = head;
			while (slow != fast)
			{
				slow = slow->next;
				fast = fast->next;
			}
			return (slow);
		}
	}

	return (NULL);
}
EOF

cat << 'EOF' > 10-delete_nodeint.c
#include "lists.h"

/**
 * delete_nodeint_at_index - deletes the node at index of a listint_t list
 * @head: pointer to the pointer of the first node
 * @index: index of the node to delete
 * Return: 1 if it succeeded, -1 if it failed
 */
int delete_nodeint_at_index(listint_t **head, unsigned int index)
{
	listint_t *current, *prev;
	unsigned int i;

	if (*head == NULL)
		return (-1);

	if (index == 0)
	{
		current = *head;
		*head = current->next;
		free(current);
		return (1);
	}

	prev = *head;
	current = (*head)->next;
	for (i = 1; current != NULL; i++)
	{
		if (i == index)
		{
			prev->next = current->next;
			free(current);
			return (1);
		}
		prev = current;
		current = current->next;
	}

	return (-1);
}
EOF

cat << 'EOF' > 1-listint_len.c
#include "lists.h"

/**
 * listint_len - returns the number of elements in a listint_t list
 * @h: pointer to the list
 * Return: number of elements in the list
 */
size_t listint_len(const listint_t *h)
{
	size_t count = 0;

	while (h != NULL)
	{
		count++;
		h = h->next;
	}

	return (count);
}
EOF

cat << 'EOF' > 2-add_nodeint.c
#include "lists.h"

/**
 * add_nodeint - adds a new node at the beginning of a listint_t list
 * @head: pointer to the pointer of the first node
 * @n: integer to add to the list
 * Return: pointer to the new node or NULL if it failed
 */
listint_t *add_nodeint(listint_t **head, const int n)
{
	listint_t *new_node = malloc(sizeof(listint_t));

	if (new_node == NULL)
		return (NULL);

	new_node->n = n;
	new_node->next = *head;
	*head = new_node;

	return (new_node);
}
EOF

cat << 'EOF' > 2-main.c
#include <stdio.h>
#include <stdlib.h>
#include "lists.h"

/**
 * main - entry point for testing the linked list functions
 * Return: Always 0
 */
int main(void)
{
	listint_t *head = NULL;

	print_listint(head);

	return (0);
}
EOF

cat << 'EOF' > 3-add_nodeint_end.c
#include "lists.h"

#include "lists.h"

/**
 * add_nodeint_end - adds a new node at the end of a listint_t list
 * @head: pointer to the pointer of the first node
 * @n: integer to add to the list
 * Return: pointer to the new node or NULL if it failed
 */
listint_t *add_nodeint_end(listint_t **head, const int n)
{
	listint_t *new_node = malloc(sizeof(listint_t));
	listint_t *last = *head;

	if (new_node == NULL)
		return (NULL);

	new_node->n = n;
	new_node->next = NULL;

	if (*head == NULL)
	{
		*head = new_node;
		return (new_node);
	}

	while (last->next != NULL)
		last = last->next;

	last->next = new_node;
	return (new_node);
}
EOF

cat << 'EOF' > 3-main.c
#include <stdio.h>
#include <stdlib.h>
#include "lists.h"

/**
 * main - entry point for testing the linked list functions
 * Return: Always 0
 */
int main(void)
{
	listint_t *head = NULL;

	add_nodeint_end(&head, 1);
	add_nodeint_end(&head, 3);
	add_nodeint_end(&head, 5);

	print_listint(head);

	return (0);
}
EOF

cat << 'EOF' > 4-free_listint.c
#include "lists.h"

/**
 * free_listint - frees a listint_t list
 * @head: pointer to the first node
 */
void free_listint(listint_t *head)
{
	listint_t *current;

	while (head != NULL)
	{
		current = head;
		head = head->next;
		free(current);
	}
}
EOF

cat << 'EOF' > 4-main.c
#include <stdio.h>
#include <stdlib.h>
#include "lists.h"

/**
 * main - entry point for testing the linked list functions
 * Return: Always 0
 */
int main(void)
{
	listint_t *head = NULL;

	add_nodeint_end(&head, 1);
	add_nodeint_end(&head, 3);
	add_nodeint_end(&head, 5);
	print_listint(head);

	free_listint(head);

	return (0);
}
EOF

cat << 'EOF' > 5-get_nodeint.c
#include "lists.h"

/**
 * get_nodeint - returns the nth node of a listint_t list
 * @head: pointer to the first node
 * @index: index of the node to return
 * Return: pointer to the nth node or NULL if it failed
 */
listint_t *get_nodeint(const listint_t *head, unsigned int index)
{
	unsigned int i;
	listint_t *current = (listint_t *)head;

	for (i = 0; current != NULL; i++)
	{
		if (i == index)
			return (current);
		current = current->next;
	}

	return (NULL);
}
EOF

cat << 'EOF' > 5-main.c
#include <stdio.h>
#include <stdlib.h>
#include "lists.h"

/**
 * main - entry point for testing the linked list functions
 * Return: Always 0
 */
int main(void)
{
	listint_t *head = NULL;
	listint_t *node;

	add_nodeint_end(&head, 1);
	add_nodeint_end(&head, 3);
	add_nodeint_end(&head, 5);

	node = get_nodeint(head, 1);
	if (node)
		printf("Node at index 1: %d\n", node->n);
	else
		printf("Node not found\n");

	node = get_nodeint(head, 10);
	if (node)
		printf("Node at index 10: %d\n", node->n);
	else
		printf("Node not found\n");

	return (0);
}
EOF

cat << 'EOF' > 6-sum_listint.c
#include "lists.h"

/**
 * sum_listint - returns the sum of all the data of a listint_t list
 * @head: pointer to the first node
 * Return: sum of all the data, 0 if the list is empty
 */
int sum_listint(const listint_t *head)
{
	int sum = 0;

	while (head != NULL)
	{
		sum += head->n;
		head = head->next;
	}

	return (sum);
}
EOF

cat << 'EOF' > 6-main.c
#include <stdio.h>
#include <stdlib.h>
#include "lists.h"

/**
 * main - entry point for testing the linked list functions
 * Return: Always 0
 */
int main(void)
{
	listint_t *head = NULL;
	int sum;

	add_nodeint_end(&head, 1);
	add_nodeint_end(&head, 3);
	add_nodeint_end(&head, 5);

	sum = sum_listint(head);
	printf("Sum of list: %d\n", sum);

	return (0);
}
EOF

cat << 'EOF' > 8-delete_nodeint.c
#include "lists.h"

/**
 * delete_nodeint_at_index - deletes the node at index of a listint_t list
 * @head: pointer to the pointer of the first node
 * @index: index of the node to delete
 * Return: 1 if it succeeded, -1 if it failed
 */
int delete_nodeint_at_index(listint_t **head, unsigned int index)
{
	listint_t *current, *prev;
	unsigned int i;

	if (*head == NULL)
		return (-1);

	if (index == 0)
	{
		current = *head;
		*head = current->next;
		free(current);
		return (1);
	}

	prev = *head;
	current = (*head)->next;
	for (i = 1; current != NULL; i++)
	{
		if (i == index)
		{
			prev->next = current->next;
			free(current);
			return (1);
		}
		prev = current;
		current = current->next;
	}

	return (-1);
}
EOF

cat << 'EOF' > 8-main.c
#include <stdio.h>
#include <stdlib.h>
#include "lists.h"

/**
 * main - entry point for testing the linked list functions
 * Return: Always 0
 */
int main(void)
{
	listint_t *head = NULL;

	add_nodeint_end(&head, 1);
	add_nodeint_end(&head, 3);
	add_nodeint_end(&head, 5);
	print_listint(head);

	printf("Delete node at index 1\n");
	delete_nodeint_at_index(&head, 1);
	print_listint(head);

	printf("Delete node at index 0\n");
	delete_nodeint_at_index(&head, 0);
	print_listint(head);

	printf("Delete node at index 10\n");
	delete_nodeint_at_index(&head, 10);

	free_listint(head);

	return (0);
}
EOF

cat << 'EOF' > 9-insert_nodeint.c
#include "lists.h"

/**
 * insert_nodeint_at_index - inserts a new node at a given position
 * @head: pointer to the pointer of the first node
 * @idx: index of the list where the new node should be added
 * @n: integer to add to the list
 * Return: address of the new node or NULL if it failed
 */
listint_t *insert_nodeint_at_index(listint_t **head, unsigned int idx, int n)
{
	listint_t *new_node, *current;
	unsigned int i;

	new_node = malloc(sizeof(listint_t));
	if (new_node == NULL)
		return (NULL);

	new_node->n = n;

	if (idx == 0)
	{
		new_node->next = *head;
		*head = new_node;
		return (new_node);
	}

	current = *head;
	for (i = 1; current != NULL && i < idx; i++)
		current = current->next;

	if (current == NULL)
	{
		free(new_node);
		return (NULL);
	}

	new_node->next = current->next;
	current->next = new_node;

	return (new_node);
}
EOF

cat << 'EOF' > 9-main.c
#include <stdio.h>
#include <stdlib.h>
#include "lists.h"

/**
 * main - entry point for testing the linked list functions
 * Return: Always 0
 */
int main(void)
{
	listint_t *head = NULL;

	add_nodeint_end(&head, 1);
	add_nodeint_end(&head, 3);
	add_nodeint_end(&head, 5);
	print_listint(head);

	printf("Insert 100 at index 1\n");
	insert_nodeint_at_index(&head, 1, 100);
	print_listint(head);

	printf("Insert 200 at index 0\n");
	insert_nodeint_at_index(&head, 0, 200);
	print_listint(head);

	printf("Insert 300 at index 10\n");
	insert_nodeint_at_index(&head, 10, 300);

	free_listint(head);

	return (0);
}
EOF

cat << 'EOF' > lists.h
#ifndef LISTS_H
#define LISTS_H

#include <stddef.h>

/**
 * struct listint_s - singly linked list
 * @n: integer
 * @next: pointer to the next node
 *
 * Description: singly linked list node structure
 */
typedef struct listint_s
{
	int n;
	struct listint_s *next;
} listint_t;

/* Function Prototypes */
size_t print_listint(const listint_t *h);
listint_t *add_nodeint_end(listint_t **head, const int n);
void free_listint(listint_t *head);
listint_t *get_nodeint(const listint_t *head, unsigned int index);
int sum_listint(const listint_t *head);
int delete_nodeint_at_index(listint_t **head, unsigned int index);
listint_t *insert_nodeint_at_index(listint_t **head, unsigned int idx, int n);

#endif /* LISTS_H */
EOF

# Compile all C files and create the executable
gcc -Wall -Werror -Wextra -pedantic 0-main.c 1-main.c 2-main.c 3-main.c 4-main.c 5-main.c 6-main.c 8-main.c 9-main.c -o linked_list

