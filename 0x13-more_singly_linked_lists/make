#!/bin/bash

# Create lists.h file
cat > lists.h << EOL
#ifndef LISTS_H
#define LISTS_H

#include <stdio.h>
#include <stdlib.h>

typedef struct listint_s
{
    int n;
    struct listint_s *next;
} listint_t;

size_t print_listint(const listint_t *h);
size_t listint_len(const listint_t *h);
listint_t *add_nodeint(listint_t **head, const int n);
listint_t *add_nodeint_end(listint_t **head, const int n);
void free_listint(listint_t *head);
void free_listint2(listint_t **head);
int pop_listint(listint_t **head);
listint_t *get_nodeint_at_index(listint_t *head, unsigned int index);
int sum_listint(listint_t *head);
listint_t *insert_nodeint_at_index(listint_t **head, unsigned int idx, int n);
int delete_nodeint_at_index(listint_t **head, unsigned int index);
listint_t *reverse_listint(listint_t **head);
size_t print_listint_safe(const listint_t *head);
size_t free_listint_safe(listint_t **h);
listint_t *find_listint_loop(listint_t *head);

#endif
EOL

# Create 0-print_listint.c file
cat > 0-print_listint.c << EOL
#include "lists.h"

size_t print_listint(const listint_t *h)
{
    size_t num = 0;

    while (h)
    {
        printf("%d\\n", h->n);
        num++;
        h = h->next;
    }

    return (num);
}
EOL

# Create 1-listint_len.c file
cat > 1-listint_len.c << EOL
#include "lists.h"

size_t listint_len(const listint_t *h)
{
    size_t num = 0;

    while (h)
    {
        num++;
        h = h->next;
    }

    return (num);
}
EOL

# Create 2-add_nodeint.c file
cat > 2-add_nodeint.c << EOL
#include "lists.h"

listint_t *add_nodeint(listint_t **head, const int n)
{
    listint_t *new;

    new = malloc(sizeof(listint_t));
    if (!new)
        return (NULL);

    new->n = n;
    new->next = *head;
    *head = new;

    return (new);
}
EOL

# Create 3-add_nodeint_end.c file
cat > 3-add_nodeint_end.c << EOL
#include "lists.h"

listint_t *add_nodeint_end(listint_t **head, const int n)
{
    listint_t *new;
    listint_t *temp = *head;

    new = malloc(sizeof(listint_t));
    if (!new)
        return (NULL);

    new->n = n;
    new->next = NULL;

    if (*head == NULL)
    {
        *head = new;
        return (new);
    }

    while (temp->next)
        temp = temp->next;

    temp->next = new;

    return (new);
}
EOL

# Create 4-free_listint.c file
cat > 4-free_listint.c << EOL
#include "lists.h"

void free_listint(listint_t *head)
{
    listint_t *temp;

    while (head)
    {
        temp = head->next;
        free(head);
        head = temp;
    }
}
EOL

# Create 5-free_listint2.c file
cat > 5-free_listint2.c << EOL
#include "lists.h"

void free_listint2(listint_t **head)
{
    listint_t *temp;

    if (head == NULL)
        return;

    while (*head)
    {
        temp = (*head)->next;
        free(*head);
        *head = temp;
    }

    *head = NULL;
}
EOL

# Create 6-pop_listint.c file
cat > 6-pop_listint.c << EOL
#include "lists.h"

int pop_listint(listint_t **head)
{
    listint_t *temp;
    int num;

    if (!head || !*head)
        return (0);

    num = (*head)->n;
    temp = (*head)->next;
    free(*head);
    *head = temp;

    return (num);
}
EOL

# Create 7-get_nodeint.c file
cat > 7-get_nodeint.c << EOL
#include "lists.h"

listint_t *get_nodeint_at_index(listint_t *head, unsigned int index)
{
    unsigned int i = 0;
    listint_t *temp = head;

    while (temp && i < index)
    {
        temp = temp->next;
        i++;
    }

    return (temp ? temp : NULL);
}
EOL

# Create 8-sum_listint.c file
cat > 8-sum_listint.c << EOL
#include "lists.h"

int sum_listint(listint_t *head)
{
    int sum = 0;
    listint_t *temp = head;

    while (temp)
    {
        sum += temp->n;
        temp = temp->next;
    }

    return (sum);
}
EOL

# Create 9-insert_nodeint.c file
cat > 9-insert_nodeint.c << EOL
#include "lists.h"

listint_t *insert_nodeint_at_index(listint_t **head, unsigned int idx, int n)
{
    unsigned int i;
    listint_t *new;
    listint_t *temp = *head;

    new = malloc(sizeof(listint_t));
    if (!new || !head)
        return (NULL);

    new->n = n;
    new->next = NULL;

    if (idx == 0)
    {
        new->next = *head;
        *head = new;
        return (new);
    }

    for (i = 0; temp && i < idx; i++)
    {
        if (i == idx - 1)
        {
            new->next = temp->next;
            temp->next = new;
            return (new);
        }
        else
            temp = temp->next;
    }

    return (NULL);
}
EOL

# Create 10-delete_nodeint.c file
cat > 10-delete_nodeint.c << EOL
#include "lists.h"

int delete_nodeint_at_index(listint_t **head, unsigned int index)
{
    listint_t *temp = *head;
    listint_t *current = NULL;
    unsigned int i = 0;

    if (*head == NULL)
        return (-1);

    if (index == 0)
    {
        *head = (*head)->next;
        free(temp);
        return (1);
    }

    while (i < index - 1)
    {
        if (!temp || !(temp->next))
            return (-1);
        temp = temp->next;
        i++;
    }

    current = temp->next;
    temp->next = current->next;
    free(current);

    return (1);
}
EOL

# Create 100-reverse_listint.c file
cat > 100-reverse_listint.c << EOL
#include "lists.h"

listint_t *reverse_listint(listint_t **head)
{
    listint_t *prev = NULL;
    listint_t *next = NULL;

    while (*head)
    {
        next = (*head)->next;
        (*head)->next = prev;
        prev = *head;
        *head = next;
    }

    *head = prev;

    return (*head);
}
EOL

# Create 101-print_listint_safe.c file
cat > 101-print_listint_safe.c << EOL
#include "lists.h"
#include <stdio.h>

size_t looped_listint_len(const listint_t *head);
size_t print_listint_safe(const listint_t *head);

size_t looped_listint_len(const listint_t *head)
{
    const listint_t *tortoise, *hare;
    size_t nodes = 1;

    if (head == NULL || head->next == NULL)
        return (0);

    tortoise = head->next;
    hare = (head->next)->next;

    while (hare)
    {
        if (tortoise == hare)
        {
            tortoise = head;
            while (tortoise != hare)
            {
                nodes++;
                tortoise = tortoise->next;
                hare = hare->next;
            }

            tortoise = tortoise->next;
            while (tortoise != hare)
            {
                nodes++;
                tortoise = tortoise->next;
            }

            return (nodes);
        }

        tortoise = tortoise->next;
        hare = (hare->next)->next;
    }

    return (0);
}

size_t print_listint_safe(const listint_t *head)
{
    size_t nodes, index = 0;

    nodes = looped_listint_len(head);

    if (nodes == 0)
    {
        for (; head != NULL; nodes++)
        {
            printf("[%p] %d\\n", (void *)head, head->n);
            head = head->next;
        }
    }
    else
    {
        for (index = 0; index < nodes; index++)
        {
            printf("[%p] %d\\n", (void *)head, head->n);
            head = head->next;
        }

        printf("-> [%p] %d\\n", (void *)head, head->n);
    }

    return (nodes);
}
EOL

# Create 102-free_listint_safe.c file
cat > 102-free_listint_safe.c << EOL
#include "lists.h"

size_t free_listint_safe(listint_t **h)
{
    size_t len = 0;
    int diff;
    listint_t *temp;

    if (!h || !*h)
        return (0);

    while (*h)
    {
        diff = *h - (*h)->next;
        if (diff > 0)
        {
            temp = (*h)->next;
            free(*h);
            *h = temp;
            len++;
        }
        else
        {
            free(*h);
            *h = NULL;
            len++;
            break;
        }
    }

    *h = NULL;

    return (len);
}
EOL

# Create 103-find_loop.c file
cat > 103-find_loop.c << EOL
#include "lists.h"

listint_t *find_listint_loop(listint_t *head)
{
    listint_t *slow = head;
    listint_t *fast = head;

    if (!head)
        return (NULL);

    while (slow && fast && fast->next)
    {
        fast = fast->next->next;
        slow = slow->next;
        if (fast == slow)
        {
            slow = head;
            while (slow != fast)
            {
                slow = slow->next;
                fast = fast->next;
            }
            return (fast);
        }
    }

    return (NULL);
}
EOL

echo "Files created successfully!"

