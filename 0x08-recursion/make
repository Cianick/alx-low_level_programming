#!/bin/bash

# Create 0-object_like_macro.h
cat <<EOF > 0-object_like_macro.h
#ifndef OBJECT_LIKE_MACRO_H
#define OBJECT_LIKE_MACRO_H

#define SIZE 1024

#endif /* OBJECT_LIKE_MACRO_H */
EOF

# Create 1-pi.h
cat <<EOF > 1-pi.h
#ifndef PI_H
#define PI_H

#define PI 3.14159265359

#endif /* PI_H */
EOF

# Create 2-main.c
cat <<EOF > 2-main.c
#include <stdio.h>

/**
 * main - prints the name of the file
 *
 * Return: Always 0 (Success)
 */
int main(void)
{
    printf("%s\n", __FILE__);
    return (0);
}
EOF

# Create 3-function_like_macro.h
cat <<EOF > 3-function_like_macro.h
#ifndef FUNCTION_LIKE_MACRO_H
#define FUNCTION_LIKE_MACRO_H

#define ABS(x) ((x) < 0 ? -(x) : (x))

#endif /* FUNCTION_LIKE_MACRO_H */
EOF

# Create 4-sum.h
cat <<EOF > 4-sum.h
#ifndef SUM_H
#define SUM_H

#define SUM(x, y) ((x) + (y))

#endif /* SUM_H */
EOF

# Create main.h
cat <<EOF > main.h
#ifndef MAIN_H
#define MAIN_H

int _putchar(char c);
int _atoi(char *s);

#endif /* MAIN_H */
EOF

# Create _putchar.c
cat <<EOF > _putchar.c
#include <unistd.h>
#include "main.h"

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
    return (write(1, &c, 1));
}
EOF

# Create 0-puts_recursion.c
cat <<EOF > 0-puts_recursion.c
#include "main.h"

/**
 * _puts_recursion - function like puts();
 * @s: input
 * Return: Always 0 (Success)
 */
void _puts_recursion(char *s)
{
    if (*s)
    {
        _putchar(*s);
        _puts_recursion(s + 1);
    }
    else
    {
        _putchar('\n');
    }
}
EOF

# Create 1-print_rev_recursion.c
cat <<EOF > 1-print_rev_recursion.c
#include "main.h"

/**
 * _print_rev_recursion - Prints a string in reverse.
 * @s: The string to be printed.
 */
void _print_rev_recursion(char *s)
{
    if (*s)
    {
        _print_rev_recursion(s + 1);
        _putchar(*s);
    }
}
EOF

# Create 2-strlen_recursion.c
cat <<EOF > 2-strlen_recursion.c
#include "main.h"

/**
 * _strlen_recursion - Returns the length of a string.
 * @s: The string to be measured.
 *
 * Return: The length of the string.
 */
int _strlen_recursion(char *s)
{
    if (*s)
    {
        return (1 + _strlen_recursion(s + 1));
    }
    return (0);
}
EOF

# Create 3-factorial.c
cat <<EOF > 3-factorial.c
#include "main.h"

/**
 * factorial - returns the factorial of a number
 * @n: number to return the factorial from
 *
 * Return: factorial of n
 */
int factorial(int n)
{
    if (n < 0)
        return (-1);
    if (n == 0)
        return (1);
    return (n * factorial(n - 1));
}
EOF

# Create 4-pow_recursion.c
cat <<EOF > 4-pow_recursion.c
#include "main.h"

/**
 * _pow_recursion - returns the value of x raised to the power of y
 * @x: value to raise
 * @y: power
 *
 * Return: result of the power
 */
int _pow_recursion(int x, int y)
{
    if (y < 0)
        return (-1);
    if (y == 0)
        return (1);
    return (x * _pow_recursion(x, y - 1));
}
EOF
#!/bin/bash

# Create 5-sqrt_recursion.c
cat <<EOF > 5-sqrt_recursion.c
#include "main.h"

/**
 * sqrt_helper - Calculates the square root of n using recursion
 * @n: The number for which to calculate the square root
 * @i: The iterator
 *
 * Return: The natural square root of n, or -1 if n does not have a natural
 * square root
 */
int sqrt_helper(int n, int i)
{
    if (i * i > n)
        return (-1);
    if (i * i == n)
        return (i);
    return (sqrt_helper(n, i + 1));
}

/**
 * _sqrt_recursion - Returns the natural square root of a number
 * @n: The number to calculate the square root of
 *
 * Return: The resulting square root
 */
int _sqrt_recursion(int n)
{
    if (n < 0)
        return (-1);
    return (sqrt_helper(n, 0));
}
EOF

# Create 6-is_prime_number.c
cat <<EOF > 6-is_prime_number.c
#include "main.h"

/**
 * prime_helper - Checks if a number is prime using recursion
 * @n: The number to check
 * @i: The iterator
 *
 * Return: 1 if n is prime, 0 otherwise
 */
int prime_helper(int n, int i)
{
    if (n <= 1)
        return (0);
    if (i == 1)
        return (1);
    if (n % i == 0)
        return (0);
    return (prime_helper(n, i - 1));
}

/**
 * is_prime_number - Says if an integer is a prime number or not
 * @n: The number to evaluate
 *
 * Return: 1 if n is a prime number, 0 if not
 */
int is_prime_number(int n)
{
    return (prime_helper(n, n - 1));
}
EOF

# Create 100-is_palindrome.c
cat <<EOF > 100-is_palindrome.c
#include "main.h"

/**
 * is_palindrome - Checks if a string is a palindrome
 * @s: The string to check
 *
 * Return: 1 if it is a palindrome, 0 if not
 */
int is_palindrome(char *s)
{
    int len = _strlen_recursion(s);
    return (check_palindrome(s, 0, len - 1));
}

/**
 * check_palindrome - Checks if a string is a palindrome using recursion
 * @s: The string to check
 * @start: The starting index
 * @end: The ending index
 *
 * Return: 1 if it is a palindrome, 0 if not
 */
int check_palindrome(char *s, int start, int end)
{
    if (start >= end)
        return (1);
    if (s[start] != s[end])
        return (0);
    return (check_palindrome(s, start + 1, end - 1));
}

/**
 * _strlen_recursion - Returns the length of a string
 * @s: The string to calculate the length of
 *
 * Return: The length of the string
 */
int _strlen_recursion(char *s)
{
    if (*s == '\0')
        return (0);
    return (1 + _strlen_recursion(s + 1));
}
EOF

# Create 101-wildcmp.c
cat <<EOF > 101-wildcmp.c
#include "main.h"

/**
 * wildcmp - Compares two strings
 * @s1: The first string
 * @s2: The second string
 *
 * Return: 1 if the strings can be considered identical, 0 otherwise
 */
int wildcmp(char *s1, char *s2)
{
    if (*s1 == '\0' && *s2 == '\0')
        return (1);
    if (*s1 == *s2)
        return (wildcmp(s1 + 1, s2 + 1));
    if (*s2 == '*')
    {
        if (*(s2 + 1) == '*')
            return (wildcmp(s1, s2 + 1));
        if (wildcmp(s1 + 1, s2) || wildcmp(s1, s2 + 1))
            return (1);
    }
    return (0);
}
EOF

echo "Files created successfully!"

